const authorModel = require("../models/authorModel")
const blogModel = require("../models/blogModel")
const { isValid } = require("../validator/validations")
const validator = require('validator')

const createBlog = async function (req, res) {
    try {
        let data = req.body
        let { title, body, authorId, category } = data

        if (!isValid(title)) return res.status(400).send({ status: false, msg: "title is mandotary" })

        if (!isValid(body)) return res.status(400).send({ status: false, msg: "body is mandotary" })



        if (!isValid(category)) return res.status(400).send({ status: false, msg: "category is mandotary" })


        if (Object.keys(data).length == 0) return res.status(400).send({ status: false, msg: "authorId is mandotary" })

        if (authorId.length != 24) return res.status(400).send({ status: false, msg: "authorId is not valid" })

        let validTitle = validator.isAlpha(title)
        if (validTitle == false) return res.status(400).send({ status: false, msg: "title have to alphabat" })



        if (data.isPubished == true) {
            let date = Date();
            data["publishedAt"] = date;
            data.publishedAt.save()

        }
        let id = authorId
        let checkAuthor = await authorModel.findById(id);
        if (!checkAuthor) { return res.status(404).send({ status: false, msg: "Author not exist" }) }
        const resultData = await blogModel.create(data)
        res.status(201).send({ status: true, msg: resultData })
    } catch (error) {
        res.status(500).send({ staus: false, message: err.message })
    }
}
module.exports.createBlog = createBlog
let getBlogs = async function (req, res) {
    try {
        let category = req.query.category;
        let authorId = req.query.authorId;
        let subcategory = req.query.subcategory;
        let tags = req.query.tags;

        let filter = {
            isDeleted: false,
            isPublished: true,
        };

        if (authorId) {
            if (authorId.length != 24) { return res.status(400).send({ status: false, msg: "please enter a valid authorId" }) }
            filter.authorId = authorId;
        }

        if (category) {
            filter.category = category;
        }

        if (tags) {
            filter.tags = tags;
        }

        if (subcategory) {
            filter.subcategory = subcategory;
        }

        let data = await blogModel.find(filter);
        if (data.length == 0) { return res.status(404).send({ status: false, msg: "Blog is no exist" }) }
        return res.status(200).send({ status: true, data: data })
    } catch (error) {
        
        res.status(500).send({ status: false, msg: "network error"});
    }
}

module.exports.getBlogs = getBlogs;